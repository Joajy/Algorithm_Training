import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringBuilder sb = new StringBuilder();
    static StringTokenizer st;
    static int n, k, w;
    static int[] dist, cost, indeg;
    static List<Integer>[] post;

    static void input() throws IOException {
        st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        k = Integer.parseInt(st.nextToken());
        cost = new int[n + 1];
        dist = new int[n + 1];
        indeg = new int[n + 1];
        post = new ArrayList[n + 1];
        st = new StringTokenizer(br.readLine());
        for(int i = 1; i <= n; i++) {
            cost[i] = Integer.parseInt(st.nextToken());
            post[i] = new ArrayList<>();
        }
        for(int i = 0; i < k; i++) {
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            post[x].add(y);
            ++indeg[y];
        }
        w = Integer.parseInt(br.readLine());
    }

    static void solution() {
        Deque<Integer> q = new ArrayDeque<>();
        for(int i = 1; i <= n; i++) {
            if(indeg[i] == 0) {
                q.add(i);
                dist[i] = cost[i];
            }
        }
        while(!q.isEmpty()) {
            int cur = q.poll();
            for(int nxt : post[cur]) {
                if(--indeg[nxt] == 0) {
                    q.add(nxt);
                }
                dist[nxt] = Math.max(dist[nxt], dist[cur] + cost[nxt]);
            }
        }
        sb.append(dist[w]).append('\n');
    }

    public static void main(String[] args) throws IOException {
        int t = Integer.parseInt(br.readLine());
        for(int i = 0; i < t; i++) {
            input();
            solution();
        }
        System.out.print(sb);
    }
}
