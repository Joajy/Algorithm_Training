import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st;
    static int n, m;
    static long answer;
    static Map<Integer, List<Integer>> edges;

    static void input() throws IOException {
        st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        edges = new HashMap<>();
        for (int i = 0; i < m; ++i) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            edges.computeIfAbsent(a, k -> new ArrayList<>()).add(b);
            edges.computeIfAbsent(b, k -> new ArrayList<>()).add(a);
        }
        answer = 0;
    }

    static void solution() {
        answer = (long) n * (n + 1) / 2 + (n - 2);
        if(!edges.containsKey(1)) {
            System.out.println(answer);
            return;
        }
        if (edges.get(1).size() == 1) {
            int a = edges.get(1).get(0);
            //1 - a, b - c이므로 a는 b, c에 제외한 최솟값과 연결해야된다
            //b, c는 1과 연결이 이미 되어있는 상태라 전제할 수 있다(1과의 연결이 지워진 것이 아니기 때문)
            for (int i = 2; i <= n; ++i) {
                if(i == a) continue;
                if(edges.get(a).contains(i)) continue;
                answer += i - 1;
                break;
            }
        } else if (edges.get(1).size() == 2) {
            //1 - a, 1 - b 가 되므로 (a, b) 제외한 최솟값과 연결
            int a = edges.get(1).get(0), b = edges.get(1).get(1);
            answer -= 2;
            for (int i = 2; i <= n; ++i) {
                if(i == a || i == b) continue;
                answer += i + Math.min(i, Math.min(a, b));
                break;
            }
        }
        System.out.println(answer);
    }

    public static void main(String[] args) throws IOException {
        input();
        solution();
    }
}
