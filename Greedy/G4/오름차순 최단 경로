import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st;
    static int n, m;
    static List<Integer>[] edges;

    static void input() throws IOException {
        st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        edges = new ArrayList[n + 1];
        for(int i = 1; i <= n; i++) {
            edges[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; ++i) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            edges[a].add(b);
            edges[b].add(a);
        }
    }

    static void solution() {
        for (int i = 2; i <= n; ++i) {
            boolean possible = false;
            for(int adj : edges[i]) {
                //인접한 항목이 해당 현재의 항목보다 작은 게 하나라도 있다면, 1에 더 낮은 비용으로 도달할 수 있다
                if (adj < i) {
                    possible = true;
                    break;
                }
            }
            if(!possible) {
                System.out.println("NO");
                return;
            }
        }
        System.out.println("YES");
    }

    public static void main(String[] args) throws IOException {
        input();
        solution();
    }
}
