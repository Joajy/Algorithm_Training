import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st;
    static int n, m, s, e;
    static int[] dist;
    static List<Info>[] edges;
    static class Info {
        int v, cost;
        Info(int v, int cost) {
            this.v = v;
            this.cost = cost;
        }
    }

    static void input() throws IOException {
        n = Integer.parseInt(br.readLine());
        m = Integer.parseInt(br.readLine());
        dist = new int[n + 1];
        Arrays.fill(dist, (int) 1e9);
        edges = new ArrayList[n + 1];
        for (int i = 1; i <= n; ++i) {
            edges[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; ++i) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            int c = Integer.parseInt(st.nextToken());
            edges[a].add(new Info(b, c));
        }
        st = new StringTokenizer(br.readLine());
        s = Integer.parseInt(st.nextToken());
        e = Integer.parseInt(st.nextToken());
    }

    static void solution() {
        PriorityQueue<Info> q = new PriorityQueue<>((o1, o2) -> {
            return o1.cost - o2.cost;
        });
        q.add(new Info(s, 0));
        dist[s] = 0;
        while (!q.isEmpty()) {
            Info cur = q.poll();
            //현 시점에서의 거리보다 더 짧은 경우가 있다면, 굳이 더 탐색해볼 이유가 없다.
            if(dist[cur.v] < cur.cost) continue;
            for (Info nxt : edges[cur.v]) {
                if(dist[cur.v] + nxt.cost >= dist[nxt.v]) continue;
                dist[nxt.v] = dist[cur.v] + nxt.cost;
                q.add(nxt);
            }
        }
        System.out.print(dist[e]);
    }

    public static void main(String[] args) throws IOException {
        input();
        solution();
    }
}
