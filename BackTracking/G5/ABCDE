import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st;
    static int n, m;
    static List<Integer>[] friends;
    static boolean possible;
    static boolean[] vis;

    static void input() throws IOException {
        st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        friends = new ArrayList[n];
        vis = new boolean[n];
        for (int i = 0; i < n; ++i) {
            friends[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; ++i) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            friends[a].add(b);
            friends[b].add(a);
        }
        possible = false;
    }

    static void dfs(int cur, int count) {
        if(count == 5) {
            possible = true;
            return;
        }
        vis[cur] = true;
        for (int nxt : friends[cur]) {
            if(vis[nxt]) continue;
            dfs(nxt, count + 1);
        }
        vis[cur] = false;
    }

    static void solution() {
        for (int i = 0; i < n; ++i) {
            if(possible) {
                break;
            }
            dfs(i, 1);
        }
        if(possible) System.out.print(1);
        else System.out.print(0);
    }

    public static void main(String[] args) throws IOException {
        input();
        solution();
    }
}
