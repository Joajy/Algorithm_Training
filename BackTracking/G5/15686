import java.awt.Point;
import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st;
    static int n, m, answer;
    static List<Point> chickens, houses;
    static boolean[] vis;

    static void input() throws IOException {
        st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        chickens = new ArrayList<>();
        houses = new ArrayList<>();
        for (int i = 0; i < n; ++i) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < n; ++j) {
                int location = Integer.parseInt(st.nextToken());
                if (location == 1) {
                    houses.add(new Point(i, j));
                } else if (location == 2) {
                    chickens.add(new Point(i, j));
                }
            }
        }
        answer = Integer.MAX_VALUE;
        vis = new boolean[chickens.size()];
    }

    static int getDist(Point c, Point h) {
        return Math.abs(c.x - h.x) + Math.abs(c.y - h.y);
    }

    static int getMinimumDist() {
        int totalSum = 0;
        for (Point house : houses) {
            int minDist = Integer.MAX_VALUE;
            for (int i = 0; i < chickens.size(); ++i) {
                if(!vis[i]) continue;
                minDist = Math.min(minDist, getDist(chickens.get(i), house));
            }
            totalSum += minDist;
        }
        return totalSum;
    }

    static void search(int index, int count) {
        if (count == m) {
            answer = Math.min(answer, getMinimumDist());
        }
        if(index == chickens.size()) {
            return;
        }
        vis[index] = true;
        search(index + 1, count + 1);
        vis[index] = false;
        search(index + 1, count);
    }

    static void solution() {
        search(0, 0);
        System.out.println(answer);
    }

    public static void main(String[] args) throws IOException {
        input();
        solution();
    }
}
