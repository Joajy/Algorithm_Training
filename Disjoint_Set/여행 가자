import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st;
    static int n, m;
    static int[] par, path;
    static int[][] cities;

    static void input() throws IOException {
        n = Integer.parseInt(br.readLine());
        m = Integer.parseInt(br.readLine());
        par = new int[n + 1];
        path = new int[m];
        cities = new int[n + 1][n + 1];
        for (int i = 1; i <= n; ++i) {
            par[i] = i;
        }
        for (int i = 1; i <= n; ++i) {
            st = new StringTokenizer(br.readLine());
            for (int j = 1; j <= n; ++j) {
                cities[i][j] = Integer.parseInt(st.nextToken());
                if(cities[i][j] == 1) {
                    union(i, j);
                }
            }
        }
        st = new StringTokenizer(br.readLine());
        for(int i = 0; i < m; ++i) {
            path[i] = Integer.parseInt(st.nextToken());
        }
    }

    static int find(int x) {
        if(x == par[x]) return x;
        return par[x] = find(par[x]);
    }

    static void union(int x, int y) {
        x = find(x);
        y = find(y);
        par[x] = y;
    }

    static void solution() {
        int root = find(path[0]);
        for (int i = 1; i < m; ++i) {
            if(root == find(path[i])) continue;
            System.out.println("NO");
            return;
        }
        System.out.println("YES");
    }

    public static void main(String[] args) throws IOException {
        input();
        solution();
    }
}
